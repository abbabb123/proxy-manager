// Generated by goasset(1.0 20200404) or "go generate" . DO NOT EDIT.
// https://github.com/hidu/goasset/

package internal

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"mime"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"regexp"
	"runtime"
	"strings"
	"time"
)

// AssetFile one asset file
type AssetFile interface {
	Name() string
	ModTime() time.Time
	Content() []byte
	ContentGzip() []byte
}

// assetFile asset file  struct
type assetFile struct {
	name        string
	mtime       time.Time
	content     []byte
	contentGzip []byte
}

func (af *assetFile) Name() string {
	return af.name
}
func (af *assetFile) ModTime() time.Time {
	return af.mtime
}

func (af *assetFile) Content() []byte {
	return af.content
}
func (af *assetFile) ContentGzip() []byte {
	return af.contentGzip
}

var _ AssetFile = &assetFile{}

// AssetFiles asset files
type AssetFiles interface {
	GetAssetFile(name string) (AssetFile, error)
	GetContent(name string) []byte
	GetFileNames(dir string) []string

	FileHandlerFunc(name string) http.HandlerFunc
	HTTPHandler(baseDir string) http.Handler
}

// assetFiles asset files
type assetFiles struct {
	Files map[string]*assetFile
}

var _assetDirect bool

var _assetCwd, _ = os.Getwd()

// GetAssetFile get file by name
func (afs *assetFiles) GetAssetFile(name string) (AssetFile, error) {
	name = filepath.ToSlash(name)
	if name != "" && name[0] != '/' {
		name = "/" + name
	}
	if _assetDirect {
		assetFilePath := filepath.Join(_assetCwd, name)
		f, err := os.Open(assetFilePath)
		log.Println("[goasset] Asset Direct, name=", name, "assetPath=", assetFilePath, "err=", err)

		if err != nil {
			return nil, err
		}
		defer f.Close()
		info, err := f.Stat()
		if err != nil {
			return nil, err
		}
		if info.Mode().IsRegular() {
			content, err := ioutil.ReadAll(f)
			if err != nil {
				return nil, err
			}

			helper := newAssetHelper()
			contentNew, errHelper := helper.Execute(assetFilePath, content, "")
			if errHelper != nil {
				return nil, errHelper
			}
			return &assetFile{
				content: contentNew,
				name:    name,
				mtime:   info.ModTime(),
			}, nil
		}
		return nil, fmt.Errorf("not file")
	}
	if sf, has := afs.Files[name]; has {
		return sf, nil
	}
	return nil, fmt.Errorf("not exists")
}

// GetContent get content by name
func (afs *assetFiles) GetContent(name string) []byte {
	s, err := afs.GetAssetFile(name)
	if err != nil {
		return []byte("")
	}
	return s.Content()
}

// GetFileNames get all file names
func (afs *assetFiles) GetFileNames(dir string) []string {
	if dir == "" {
		dir = "/"
	}
	names := make([]string, 0, len(afs.Files))
	dirRaw := dir
	dir = path.Clean(dir)

	if dir != "/" && strings.HasSuffix(dirRaw, "/") {
		dir += string(filepath.Separator)
	}

	dir = filepath.ToSlash(dir)

	for name := range afs.Files {
		if strings.HasPrefix(name, dir) {
			names = append(names, name)
		}
	}
	return names
}

// FileHandlerFunc handler http files
// 若目录名称 为 *private 则不允许通过web访问
func (afs *assetFiles) FileHandlerFunc(name string) http.HandlerFunc {
	if strings.Contains(name, "private/") {
		return http.NotFound
	}
	return afs.FileHandlerFuncAll(name)
}

// FileHandlerFuncAll handler http files
// 无 private 目录规则
func (afs *assetFiles) FileHandlerFuncAll(name string) http.HandlerFunc {
	name = filepath.ToSlash(name)
	file, err := afs.GetAssetFile(name)
	return func(writer http.ResponseWriter, req *http.Request) {
		if err != nil {
			http.NotFound(writer, req)
			return
		}
		modifiedSince := req.Header.Get("If-Modified-Since")
		if modifiedSince != "" {
			t, err := time.Parse(http.TimeFormat, modifiedSince)
			if err == nil && file.ModTime().Before(t) {
				writer.Header().Del("Content-Type")
				writer.Header().Del("Content-Length")
				writer.Header().Set("Last-Modified", file.ModTime().UTC().Format(http.TimeFormat))
				writer.WriteHeader(http.StatusNotModified)
				return
			}
		}

		mimeType := mime.TypeByExtension(filepath.Ext(file.Name()))
		if mimeType != "" {
			writer.Header().Set("Content-Type", mimeType)
		}
		writer.Header().Set("Last-Modified", file.ModTime().UTC().Format(http.TimeFormat))

		gzipContent := file.ContentGzip()
		var errWrote error
		if len(gzipContent) > 0 && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			writer.Header().Set("Content-Encoding", "gzip")
			_, errWrote = writer.Write(gzipContent)
		} else {
			_, errWrote = writer.Write(file.Content())
		}

		if errWrote != nil {
			log.Printf("[wf] wrote %q with error:%s\n", name, errWrote)
		}
	}
}

// HTTPHandler handler http request
// eg:on file system is :/res/js/a.js and request is /res/js/a.js
// http.Handle("/res/",res.Asset.HttpHandler("/"))

// eg:on file system is :/res/js/a.js and request is /js/a.js
// http.Handle("/js/",res.Asset.HttpHandler("/res/"))
func (afs *assetFiles) HTTPHandler(baseDir string) http.Handler {
	return &_assetFileServer{sf: afs, pdir: baseDir}
}

type _assetFileServer struct {
	sf   *assetFiles
	pdir string
}

// ServeHTTP ServeHTTP
func (f *_assetFileServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	name := filepath.ToSlash(filepath.Join(f.pdir, r.URL.Path))
	f.sf.FileHandlerFunc(name).ServeHTTP(w, r)
}

var _ AssetFiles = &assetFiles{}

var _ = flag.String
var _ = runtime.Version()

// ---------------------------helper.go--------begin--------------------------//

func newAssetHelper() *assetHelper {
	helper := &assetHelper{}

	helper.Regs = make(map[string]*regexp.Regexp)
	helper.Regs["remove_above"] = regexp.MustCompile(`[\S\s]*?//\s*asset_remove_above\(\s*\)`)
	helper.Regs["remove"] = regexp.MustCompile(`//\s*asset_remove_start\(\s*\)[\S\s]*?//\s*asset_remove_end\(\s*\)`)
	helper.Regs["include"] = regexp.MustCompile(`//\s*asset_include\(([^)]+?)\)`)

	helper.RegisterFn("remove_above", helper.RemoveAbove)
	helper.RegisterFn("include", helper.Include)
	helper.RegisterFn("remove", helper.Remove)

	return helper
}

type assetHelperFn func(fileName string, content []byte) ([]byte, error)

type assetHelper struct {
	Fns  []map[string]assetHelperFn
	Regs map[string]*regexp.Regexp
}

// RegisterFn 注册helper方法
func (h *assetHelper) RegisterFn(name string, fn assetHelperFn) {
	h.Fns = append(h.Fns, map[string]assetHelperFn{name: fn})
}

// Execute 执行所有的helper方法
func (h *assetHelper) Execute(fileAbsPath string, content []byte, skipFnName string) (contentNew []byte, err error) {
	contentNew = make([]byte, len(content))
	copy(contentNew, content)

	for _, fnInfo := range h.Fns {
		for name, fn := range fnInfo {
			if name == skipFnName {
				continue
			}
			contentNew, err = fn(fileAbsPath, contentNew)
			if err != nil {
				return nil, fmt.Errorf("%s,current file is: %s", err.Error(), fileAbsPath)
			}
		}
	}

	return contentNew, nil
}

// RemoveAbove 删除在此标记之前的内容
// eg: \/\/ asset_remove_above()
func (h *assetHelper) RemoveAbove(fileAbsPath string, content []byte) (contentNew []byte, err error) {
	contentNew = h.Regs["remove_above"].ReplaceAll(content, []byte(""))
	return contentNew, nil
}

// Remove remove 方法, 删除指定区间里的内容
// eg: \/\/asset_remove_start() 中间的内容被删除 \/\/ asset_remove_end()
func (h *assetHelper) Remove(fileAbsPath string, content []byte) (contentNew []byte, err error) {
	contentNew = h.Regs["remove"].ReplaceAll(content, []byte(""))
	return contentNew, nil
}

func (h *assetHelper) include(fileAPath string, content []byte, includeFiles map[string]map[string]bool) (contentNew []byte, err error) {

	fileAPath = filepath.Clean(fileAPath)
	includeFiles[fileAPath] = make(map[string]bool)

	contentNew = h.Regs["include"].ReplaceAllFunc(content, func(matchData []byte) []byte {
		idx := bytes.Index(matchData, []byte("("))
		name := bytes.TrimSpace(matchData[idx+1 : len(matchData)-1])
		if len(name) == 0 {
			err = fmt.Errorf("asset_include with empty param")
			return []byte(err.Error())
		}
		fileBPath := filepath.Join(filepath.Dir(fileAPath), string(name))

		if bFiles, hasB := includeFiles[fileBPath]; hasB {
			if _, hasA := bFiles[fileAPath]; hasA {
				err = fmt.Errorf("asset_include error: cyclic include,%s include(%s)", fileAPath, string(name))
				return []byte(err.Error())
			}
		}
		includeFiles[fileAPath][fileBPath] = true

		includeFiles[fileBPath] = make(map[string]bool)

		bContent, errRead := ioutil.ReadFile(fileBPath)
		if errRead != nil {
			err = errRead
			return []byte(err.Error())
		}

		b1Content, errB1 := h.Execute(fileBPath, bContent, "include")
		if errB1 != nil {
			err = errB1
			return []byte(err.Error())
		}

		cContent, errInclude := h.include(fileBPath, b1Content, includeFiles)
		if errInclude != nil {
			err = errInclude
			return []byte(err.Error())
		}
		return cContent
	})

	if err != nil {
		return nil, err
	}
	return contentNew, nil
}

// Include 将另外一个资源文件包含到当前文件里
// eg: \/\/ asset_include(a.tpl)
func (h *assetHelper) Include(fileAPath string, content []byte) (contentNew []byte, err error) {
	// 用于检查循环include
	includeFiles := make(map[string]map[string]bool)
	return h.include(fileAPath, content, includeFiles)
}

// ---------------------------helper.go--------finish-------------------------//

// Asset export assets
var Asset AssetFiles

func init() {

	// nolint
	var _assetGzipDecode = func(data []byte, fileName string) []byte {
		gzipReader, errGzip := gzip.NewReader(bytes.NewBuffer(data))
		if errGzip != nil {
			panic(fmt.Sprintf("[goasset] gzip decode failed,file=%q, err=%s", fileName, errGzip.Error()))
		}
		defer gzipReader.Close()
		buf, errReader := ioutil.ReadAll(gzipReader)
		if errReader != nil {
			panic(fmt.Sprintf("[goasset] read decode content failed, file=%q err=%s", fileName, errReader.Error()))
		}
		return buf
	}

	// nolint
	var _assetBase64Decode = func(txt string, fileName string) []byte {
		txt = strings.ReplaceAll(txt, "\n", "")
		bf, err := base64.StdEncoding.DecodeString(txt)
		if err != nil {
			panic(fmt.Sprintf("[goasset](%s) base64 decode failed, err=%s", fileName, err.Error()))
		}
		return bf
	}

	asset := &assetFiles{Files: map[string]*assetFile{}}
	Asset = asset

	{
		// 0 mtime: 2015-09-12 11:21:11 , size: 116
		fileName := "/res/conf/pool.conf"
		contentBase64 := `
H4sIAAAAAAAA/1IuKMqvqLTNKCkpsNLXNzQy1zPQM9AztLIwsDBQUFA2BAEuLlyqTAwMDLkUFGDyxfnJ2cWmVvr6eYm5qQ4FxeUIlcZGBgYKykYgwAUAAAD/
/wEAAP//i+yUwXQAAAA=`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1442028071, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 1 mtime: 2015-09-12 11:21:11 , size: 577
		fileName := "/res/conf/proxy.conf"
		contentBase64 := `
H4sIAAAAAAAA/0yQTWsTTxyA7/MpBsIf/kK7G2vwZUA89OShF+1BEAnbzZAsJjPL7Gw1lEKE1KxtY6LNS12qGJNaW5vEQk1X0pLvUnZmd09+BdmNB2/DzDO/
h99jUsYhgnfT99IApMLJluxOZHcSdc+hqLf9qzoMjt4DbpQwtWPwNgCpaLofjgZRrR6O2/K0J9s/AMOrrAwRXAIgJQ8qYnD073PQOhOjL9K5CL6Po4obzmoF
zk1YwFoOM/j0yeKKRhYfYc7Kz+RuTYzc+bwV7SW6mQaxMfkk+xX5cyecffC9E5sV5cdD4QxkZ+hP+0Hztdwfi+ZXOewLzwNa0VjHywWsP4cIxjKkqpatrOWM
Ul7RaUm1uMYNXbVsEzOzaFuqUcqrOjXLWWbkCc8uZRST5B9k+f2N/5hGcpvxYon/r+3gjWw7gVuNuueR25onA0CPlQ8Jx2xdK6I7S+l0EqQutnvhaBCOX8nO
L3HZAClqcoMSC20QSjBEUHY/z4GFNc0ydJQESo5wfpPVSBn506msNoTXFI2LTaDZvLBaNjFKAAC4wYsYAUK5oWM07xRX2ToV77Z/X+7S/6+d42vn+AZVFEXs
OWLPASDle3U57Ae9UeBW4yq2JQau7534V7Og9S3cOZOd2kI4+yTfHoIXjJL84wRapjmMMplbfwAAAP//AQAA//9gXrPTQQIAAA==`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1442028071, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 2 mtime: 2015-09-12 11:21:11 , size: 50
		fileName := "/res/conf/users"
		contentBase64 := `
H4sIAAAAAAAA/8pLzE21SkzJzcxTKCgutyooLlfILI4HC0CEuSAqkpLB8olJyQAAAAD//wEAAP//DHUqRjIAAAA=`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1442028071, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 3 mtime: 2015-09-12 11:21:11 , size: 35919
		fileName := "/res/css/flat.css"
		contentBase64 := `
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
4w8zcHZ6AAA=`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1442028071, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 4 mtime: 2015-09-12 11:21:11 , size: 3114
		fileName := "/res/css/style.css"
		contentBase64 := `
H4sIAAAAAAAA/6RW227jNhN+Ff0rBNgAkSDFdv5EwgK96hO0V0UhUOTIIkKTAjmK7RJ694IUdbLd7UURRJA5B87hm2/0C22JNoDRt99/+zV5/1amVADR1j+L
WmE7tHgSL7ViV3si+shlkZUdYYzLY5ENsSRftuECQRdEdC35rjpCOV5/fGTPZXgv0o+yJvTzqFUvWRE3TbO4KGeva5X9/o3Wu5IqobQ3GOITyN6eOcO2eM+e
ZrOI9Kh8HFEv7OZ0dYngBhODVwEJXjsopJIwGUWC20YogoWABmejPOsuZaMkJob/BUW+7y5lrTQDnWh+bLHIu0tklOAs0seafM9e3F+aP5e1uiSmJUydvU42
yl8Ph5fpP83z59H3Gbyv/2dZiXDBhAh+lAUFiaCHdLyvarg2aMPlLsj/eveUeuycVaavXXEjwYtWfYG2N836uXZEbGjT2LRVWSNiGTedINeCS8ElJLVQ9LMc
u3hwBV53WAKelf5MsI6Q2S/QyCkRoSSouiEmhjMIINjtnsoTl8n4a++8Dek5f82CPH8NJ/v5ZB9ODvOJt4qpkhIoVgYJ9sZOCHjbxoekFjB1gSohSGegmF4m
bBiHeT8bKdZVHvRXDYsppaX3lQhyVT0WDb8AK89Ks6TWQD4L/0yIEKFSeZY93U3QCPWkVojqVBxcZu7CiJIOuZL2Dk5bD1mzb97uMBhST1B1zmXZjqLXwwz+
20xC2iEMP1djHGQZxt0cHOoI25flnc3F3v3jDR44UyDZ4qoFwkaH9l9HaZM77IDAFCY6agtuVmZ+xB9VbKrQyAFL2bFRCqdJoJQOKbKKugwfzDWySt+IvL8h
xYreG/yPnzqlkUivoO/MtnKxlruRXYvrqrb3Wbnz6/acAWFknslq5PiqUfoUNRwEM4B2WwvX5RjrKpjYFXfmW5FL3VFHI9S58ExNe22ULjrFfYFi77GiSiJI
DECaQHkjjfwsOVg9Pmc3gZSPiGVr2elpzsOiYPyrWsKv3Da5SeBELhNG3zNHbI6awsHITahTAwIoAttUmjYwpP7+sIUCElznVntpSOl6K8frWCrGvyYg36PY
w60XdtmBPquIS8emDzZxMHB78bHNgMyptMS4bTCPcLYC2kYjGqlw2fRjbbMhrll2s7PnDT+kDmyJ64lWwk4E4Eh5+f6YoThtZsJ4b8bdfccmR02urg0amAqT
WoveVR9MhawKHzlzI/0GKec+G6qVEEMqlAOjoRpA2nWbfd/DchoxsMnsngfimv08+yobUWyXPbAIHvBVUHvPHsN8MuWy6/EP9yH0w7n4c+X+Zq28On6bLmSp
IAaD8ke2NCJ8k3huVhIcYdsVYS8lbDljIIe/AQAA//8BAAD//32Cc0N2CgAA`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1442028071, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 5 mtime: 2015-10-11 20:11:54 , size: 653
		fileName := "/res/tpl/about.html"
		contentBase64 := `
H4sIAAAAAAAA/4xQQYvbPBC9+1cIX2zD90kpbS9ZWYcuvZZCl17DWJ5YSmxJSKPdDSHQ/tb+keLYCVt6qU4zmnnvzXtMdlGoQgamR0ipLc37UkHnM0kRVMFk
UF+jfz2xCRwMGPn9+1sOwUdicu8dMe1HH9tuzKgMUfj142fy+pg+3Au4VR/nwkDvX66tFDNesTCr8LeiB9TEtkwCMxH3bTnzpq0QgyWTO679JIzts7gi/1/v
KxlBHJDacteN4I6l+ieYFKDu2o85RnTEvmNM1rvt3xbPZ/68DC+X1cCMZjOc2b4tHb7s1o1dGj2VN/Zr2sUa+tokHW0gVSSkJzuhz1Tvs9Nkvaubc8Hmt+y0
vdd5QkdcRwTCzyPOXV0t46p5YG/XeYp6yW0rrqb5GoL1i/3dBE5og/rID6n8A0qngG1F+EriAM+wCtz473cMSOsR6dPpCYYvMGFdGYS+arglnOpNwyEEdP2j
sWNfL0RNcfnv3WazaR6KQopbAL8BAAD//wEAAP//an4x940CAAA=`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1444565514, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 6 mtime: 2016-04-23 13:44:36 , size: 1228
		fileName := "/res/tpl/add.html"
		contentBase64 := `
H4sIAAAAAAAA/3yT3W7iMBCF7/0UllfdO+IktCW4dtR9h71HTjwBaxPbsk0Bobz7ymnSH9H2BsRkzsecmRwe4qWHGv1qren0/q9sesCd9cPVSaW02bMid+en
Qfq9Niuv94fIcJm784g4nbW88bRGiMdJfNIqHgQp8vyOYK0E+UAmNeLRpw+FX2Sv90aQaB3BE0mQScsei6y6S61NLZXCBk7YeXu+ME6bGvE0HcYDxINVgjgb
IsGyjdoaQahUimB5jLa1g+shgiC26wiO0u8hCqI7v0uAaRI4R+lBfv73NPjTASanZZ67M8FGDiDINEMgNaeLMJlW+mXRp/JqcsVaMBE8qdH1qjuc6fBHDdqM
I+LauGPE8eJAkHBsBh0JbnsZgiBNNLiJZuW8HqS/kLSiIwiSPCUS9AHGEWEsEwwbAJWqRiUuVfqlRpwmc+k7qts1L6eCs0zLYYg7DzWajAneWRNxa3vrRdMf
oT7E6BLPxJpRWmzLrHjcZtU2K1iVV/ksS12M0hv1MS2NuXB6nhkLYJt/CXh7XHx+fAMOtv0XHj4MVm6yPEvQdZn/rLr/RlX8rJLfyMpvZeFdISGsirJatV3D
Guk7a5/fIdV6XSFOpyvMJ6NTPuiUpRoh1B59z17PxluroEY4lfBqpWSUmNwuPoDfpeXPM4jpbfl90+fCaTeoZZFi0zT31XpTbpsHWUH52G3WUFTrolXw0FT3
5ReAZH6RL1ecfGVbti7KiuC5er1mU/PuYEMcR/b221kfxzGFFnH66g5x3Xk5wBy6t7wuIVM6uF5emLEGnlIYX9trjNF/AAAA//8BAAD//1RcpyXMBAAA`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1461390276, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 7 mtime: 2016-04-23 14:00:23 , size: 3075
		fileName := "/res/tpl/index.html"
		contentBase64 := `
H4sIAAAAAAAA/5RWXU/jOBe+bn6FX4tXAk3VtHzMopJYGrHM3iAGFdDuXkWuY4hFamfsE9qq0/++sp2kbejX3FB8fJ7nfJ84GuuQBFFBMoACFVrN5mhCJX3j
ugsZR5wawQ2gKZ0jUKg0HFGZ1ioOILj5XxQWjmWx6EkFgvHl0ouAjnOODMxzHuOpSCEbDvr9/2N7pe2fFDlpjC++9osZRh80F28yxqAKvAePWE6NiTGMk4HV
Y7QAoSSJKMo0f41xaIBCaTACqt84xDgZ51S+Y+LlUUhJFNaoACHrTgRZ7c3gwnpDDNcfXCMDVEMUQkZQBKmN0kmexcQFCimJQhtOQ0N8JkEBzTdwTp4wVUro
/cUBYaeC97JQBuKD76fxOni5RFuJ/HVii3wMj1Pc5VSlYhR7N1dHsXnVY/guj+e7PIqP/gYhPcRojiMzu3g0/1naYdrRFiP+89neHECbku3yIzElO4B+pSLn
6U4Cf93iCKLQzSEJnHh9as/dmKzErfFNxQcJ6iluzSxCCDVzi6hmmQDOoNQcbUymjWGs0rn/35/16uAFKdJqagoqY3yOV5YShgnLBZfgXWyDEFN5g1qB0DiZ
Y7KxDbfjdxpNTctincs9EazjV+t4u+F13WptF0rl22x2OpH/6Wx4fIE3SOxmX7N3QLvpmkwZWC6HzblQGqruqTmkmmpaxNj/+tCGYTibzXqz2Wx4MTi/Psrm
dDrtjalIyx5TkxqxLcS2Qb9+1kwO+tf93ya4XCO4vPr6R4sgCqsmXc1KoTk5KXUe4yrkjQhCfBOwDMWIlTpPhBRwenaDAncyHFQBpycs66Lbl9H9j8fn5GV0
30WWbq/W6O75ZfTwPPr28PT9btRFoEt+dvNZPxqTGvI4+vHPv1E4Jl0cvSoJdiaUjsd5yQ/X2QIIPsbCy9Pd6PHvP3cYknTCh4WZrhjDULwiyRk3hup5cGKz
GzsrfMaZtdEkguXKcC8JotCmPQii0O2eajO5GjWVCSLDtCiABB9Uo1kyoTKRKh5YdH0TLBbiFfWE+ZZOhFwu6yXWendAxmla71n30zwhrt1qlMrtWn9F6gnL
tuqWptrMm5eDK/cyanflPTVwm3H2vg3S3wZBIMC+oyYGE2aRLzsM9v3jp/rQbL1c+44E9aaxJ5eOzmKhqXzj6MTWtXviwh7GvnfMchl0fL46n3ZZXZlUsXLC
JfSmWgA/rWv05ctZU6JqAKuvmLPUbJ5PvIuFd6JnQ/41mT+Uk53KnzLdgJuU/zKZ2nj/7TN5W6f6GF33nHgqme37A362Ud9dST6B/H5aLLhMbRtXQ9AJasl/
AAAA//8BAAD//+Y14KIDDAAA`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1461391223, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 8 mtime: 2015-09-12 11:21:11 , size: 1130
		fileName := "/res/tpl/layout.html"
		contentBase64 := `
H4sIAAAAAAAA/5RUQa/TMAy+71eEXN6FNXBDKM0FuCHBgQunKW3c1iJNpsTp3lT631HT7b1uFGnkUMv258+O+7Xyzedvn378/P6FddRbtZNXA9qoneyBNKs7
HSJQyRM1+w/8Gna6h5IPCKejD8RZ7R2Bo5Kf0FBXGhiwhn123jJ0SKjtPtbaQvm+eHdHoxN1PqxITDoB3oFiqFeIjugYPwrRInWpKmrfiw5NEsfgn8/7Xjvd
QpgZCMmCugmz32wciwFCRO+mSYoFs5MW3S8WwJY80tlC7ACIsy5AU3IRIIo6RtFYTUUdI3+0IKeuFeKy28qbs9pJgwNDU3KnB75ye3CJqx1bjkw2Ry00dIip
us1mhEVWWx1jySsfDIRDgyESV1Jfp+EKnYFnKbSSwuJ9+QqpjeFKG/MAlGBuMj8f4a18Iq6y+QsuRbIvzktw3sdyr6eAbUdPa3q5qshnHLFhBcavvkU3TTe5
ZZhxLNKspvmlW1RsA/I6r/VtHnixmxece4KNsNnshgldJkK3zTOO4MyaJe+DrX2Dg9pYDK8t6MDVBXBn/o17zc/Sqsz8TY5jMetymv6LZtGmbw8Gh9UcF4WL
/E/5AwAA//8BAAD//4RFJ3pqBAAA`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1442028071, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 9 mtime: 2015-09-12 11:21:11 , size: 702
		fileName := "/res/tpl/login.html"
		contentBase64 := `
H4sIAAAAAAAA/6SSzW6rQAxG9zyF5X3EXd8ySF10l0XfoBoYh1iav3pMUt6+moRESZt2UxaDhI8/HzCd4wOwMzi4f9g33SBt/+hoTuDobSkGfZo4bsooRLE2
7ZIECKT75AzmVBTBjsopGmxPLIJamUgN8k7eKn5qY/KukPZN52mi6PpnFzjCtrZ07fqsgcv1XWFNAnjI1OpmkjTnewag45hnBV0yGVT6UIRoAxmsJ0L2dqR9
8o7E4EtUEljSLHCuHqyfySDejRlTVEkeQeh9ZiF3b9U6PvTNH0WzLeWYxCGstrkcv8i+XpFfLR/J/TS1zENgvQZu0wR1oWvsoBEGjZssHKwst8lrbtfe7Lmt
GvV+/h4XhHdiA61vdf1FoOjiyaDjkr1d/scU6Qn7rj3jPcAnAAAA//8BAAD//xNoF86+AgAA`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1442028071, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 10 mtime: 2015-09-12 11:21:11 , size: 794
		fileName := "/res/tpl/test.html"
		contentBase64 := `
H4sIAAAAAAAA/4ySwY7bIBCG734KNNVeqsZkU7VKLYz6JhE2swEtBoqHOFaUd69wnKhp99DjjMf//P/HiJFmh7L6RDjS4S2kgZG5EJ5po5w9+oYlezR0rQRf
JyvRJVkJbU+sd2ocWzDfQcYUzjMrIo3g2p5kJRaxAckE3UIMIwFTPdngW+BlEJjVLTz2AiOVjkgtHDqn/DvISpDqHLLJajIt7LcvS69sJ3Pv/tjGM0gxRuXZ
4rCFPriQmoQa5GfByxeZk2sEJ1N+1VJYHzMxmiO2kJMD5tWALVwudU7uUIrrFe5yy6Jm/+0F7oGL3U0fPKXggCX8lW1CzVSm8Bb6PLLoVI8mOI2pBUMUG86n
aarxrIbosO7DAFLwYoXf8txC3TD+h9Nl7i+Hu31B8bHHJ0N4bFZPuag1cZx+vm7rbb2rd83X3eu+YP4X6DGpGeRk0DMcIs1f8ojs9u7WsxiCW2FXHyV7ZLqL
/nFjPXrCBM9px9wNloCdlMt4u5NHuI4868hvYrKDSvPKslpX8uVsZPUkZ6zW6O/8KLyXYtW+XOqlcb2W5Lygk9VvAAAA//8BAAD//4YZ9JYaAwAA`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1442028071, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

}
